{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Grouped Incremental Load  == #}
{# == Node Type Description    : This node loads full data into table from different storage locations == #}

{% set batchsize =  config.batchSize|int %}  {# Convert batchsize to integer #}
{% set batchvalue_list = config.mappingID.split(',') %}
{% set sourceTable = sources[0].dependencies[0].node.name %}
{% set orgSourceLocation = sources[0].dependencies[0].node.location.name %}
{% set orgFullyQualifiedSourceTableName = ref_raw(orgSourceLocation, sourceTable) %}
{% set varLoop = 0 %}
{% if config.batchLoad and batchsize > 0 %}
    {% for storage in range(0, batchvalue_list|length, batchsize) %}
	{% set varLoop = loop.index|string %}
    {{ stage('Batch Start ' +varLoop ) }}
    -- Batch {{ loop.index }} Start
	{# Target Table Location and Name #}
	{% set sourceLocation = batchvalue_list[storage] %}
	{% set sourceTableDatabaseName = storageLocations | selectattr('name', 'equalto', sourceLocation) | map(attribute='database') | first %}
	{% set sourceTableSchemaName = storageLocations | selectattr('name', 'equalto', sourceLocation) | map(attribute='schema') | first %}
    {% set fullyQualifiedSourceTableName = '"' + sourceTableDatabaseName + '"."' + sourceTableSchemaName + '"."' + sourceTable + '"' %}
	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
			(
				{% for col in columns %}
					"{{ col.name }}"
					{%- if not loop.last -%},{% endif %}
				{% endfor %}
			)
   {% for j in batchvalue_list[storage:storage+batchsize] %}
   {% set joinValue = sources[0].join |replace('<SITEID>',"'"+ j +"'") %}
   {% set joinValue = joinValue | replace(orgFullyQualifiedSourceTableName,  '"' + sourceTableDatabaseName + '"."' + sourceTableSchemaName + '"."' + sourceTable + '"') %}
    {%- if not loop.first -%}UNION ALL{% endif %}
			SELECT
			{% for col in sources[0].columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
				{%- if not loop.last -%}, {% endif %}
			{% endfor %}
		{{ joinValue }}
   {% endfor %}
-- Batch {{ loop.index }} End
   {% endfor %}

{% else %}
{# Get sources to loop through #}
{% set sourceList = config.mappingID.split(',') %}
{% set sourceTable = sources[0].dependencies[0].node.name %}
{% set orgSourceLocation = sources[0].dependencies[0].node.location.name %}
{% set orgFullyQualifiedSourceTableName = ref_raw(orgSourceLocation, sourceTable) %}

{% for sourceValue in sourceList %}
	{# Target Table Location and Name #}
	{% set sourceLocation = sourceValue %}
	{% set sourceTableDatabaseName = storageLocations | selectattr('name', 'equalto', sourceLocation) | map(attribute='database') | first %}
	{% set sourceTableSchemaName = storageLocations | selectattr('name', 'equalto', sourceLocation) | map(attribute='schema') | first %}

	{% set fullyQualifiedSourceTableName = '"' + sourceTableDatabaseName + '"."' + sourceTableSchemaName + '"."' + sourceTable + '"' %}

	{% set joinValue = sources[0].join | replace('<SITEID>',"'"+ sourceValue+"'") %}
	{% set joinValue = joinValue | replace(orgFullyQualifiedSourceTableName, fullyQualifiedSourceTableName) %}

	{{ stage( sourceValue + ' Source Load' | string ) }}
		INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
			(
				{% for col in columns %}
					"{{ col.name }}"
					{%- if not loop.last -%},{% endif %}
				{% endfor %}
			)
			SELECT
			{% for col in sources[0].columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
				{%- if not loop.last -%}, {% endif %}
			{% endfor %}

		{{ joinValue }}
{% endfor %}
{% endif %}
