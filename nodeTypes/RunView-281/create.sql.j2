{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Run View  == #}
{# == Node Type Description    : This node creates a view and also runs override create sql for view.Also uses a parameter to select the sources to load the target view  == #}

 {#Parameter check for deployment#}
 {%if desiredState and currentState != desiredState%}
     {%if (desiredState.parameters == {} or 'sourcesuffix' not in desiredState.parameters or  desiredState.parameters.sourcesuffix == '') and desiredState.config.srcTable == true%}

         {{stage('WARNING')}}
         
         /*Add parameter sourcesuffix in workspace settings and deployment environment for selecting which sources to load into the target table.
          For more information, refer to the documentation. */

      {%endif%}
  {%endif%}

{% if desiredState %}

{# Override CreateSQL for view #}

    {% if desiredState.node.override.create.enabled %}
            
        {{ desiredState.node.override.create.script }}

         {%elif desiredState.node.materializationType == 'view' %}          

        {% if currentState != undefined %}
            {%if currentState.storageLocations|length == 0%}          
              {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | string %}
              {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | string %}
               {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
               
            {%else %}  
            {# Current target node mappings #}
            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | first %}
            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | first %}
            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}  
            {% endif %}      
       
            {# Desired target node mappings #}
            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='database') | first %}
            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='schema') | first %}
            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}  		
            {% if currentState.node.materializationType != 'view' %}
                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name)) }}
                DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
            {% elif  desiredState.node.name != currentState.node.name or desiredDatabaseSchema != currentDatabaseSchema  %}
                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name)) }}
                DROP VIEW IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}                    
            {% endif %}
        {% endif %}


    {% elif currentState == undefined or currentState != desiredState  %}

        {# CreateSQL for view #}

        {{ stage('Create View') }}
        CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
        (
            {% for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
        )
        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
        AS
        {% for source in desiredState.sources %}
            SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

            {{ source.join }}

            {% if not loop.last %}
                {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                    {{ desiredState.config.insertStrategy }}
                {% else %}
                    UNION
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endif %}

{% elif currentState != undefined and desiredState == undefined %}

    {# View Name #}

    {% set targetViewDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetViewSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetViewName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

    {{ stage('Drop View') }}
    DROP VIEW IF EXISTS {{ fullyQualifiedTargetViewName }}

{% endif %}
